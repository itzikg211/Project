package model;

import java.util.Observable;
import java.util.concurrent.Callable;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;

import algorithms.demo.MazeSearch;
import algorithms.mazeGenerators.DFSMazeGenerator;
import algorithms.mazeGenerators.Maze;
import algorithms.mazeGenerators.MazeGenerator;
import algorithms.search.AStar;
import algorithms.search.MazeManhattanDistance;
import algorithms.search.Solution;

public class MyModel extends Observable implements Model
{
	ExecutorService executor = Executors. newCachedThreadPool();
	Maze maze;
	Solution sol;
	@Override
	public void generateMaze(int rows, int cols) 
	{
		// TODO Auto-generated method stub
		System.out.println("generated a maze !");
		
		
		Future<Maze> f  =  executor.submit(new CallableMaze());
		if(f.isDone())
		{
			setChanged();
			notifyObservers(3);
		}
	}

	@Override
	public Maze getMaze() 
	{
		// TODO Auto-generated method stub
		System.out.println("get maze");
		if(maze==null)
		{
			System.out.println("No maze yet");
			return null;
		}
		return maze;
	}

	@Override
	public void solveMaze(Maze m) 
	{
		// TODO Auto-generated method stub
		System.out.println("solve maze");
		
		ExecutorService executor = Executors. newCachedThreadPool();
		
		Future<Solution> f  =  executor.submit (new CallableSolution());
		if(f.isDone())
		{
			executor.shutdown();
			setChanged();
			notifyObservers(4);
		}
		
	}

	@Override
	public Solution getSolution() 
	{
		// TODO Auto-generated method stub
		System.out.println("get solution of the maze");
		if(sol==null)
		{
			System.out.println("No solution yet");
			return null;
		}
		return sol;
	}

	@Override
	public void stop() 
	{
		// TODO Auto-generated method stub
		System.out.println("stop");
		
	}
	
	public class CallableMaze implements Callable<Maze>
	{

		@Override
		public Maze call() throws Exception 
		{
			MazeGenerator mg=new DFSMazeGenerator();
			maze = mg.generateMaze(10,10);
			return maze;
		}
		
	}
	
	public class CallableSolution implements Callable<Solution>
	{

		@Override
		public Solution call() throws Exception 
		{
			System.out.println("\nSolution A* without diagonals");
			MazeSearch ams1 = new MazeSearch(maze,false);
			AStar sol5 = new AStar();
			sol5.setH(new MazeManhattanDistance());
			sol = sol5.search(ams1);
			return sol;
		}
	
	}
	
	
	
}
